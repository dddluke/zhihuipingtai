"""
Django settings for test1 project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from conf.aliyun_api import parser_config

# from rest_framework.authtoken.models import Token

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9o@8xm_6@_7$%#0wb2j#@k7@tf3w3&2z_&_2at)(gp37wzizcf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'One',
    'text',
    'tinymce',
    'ckeditor',
    'taggit',
    'rest_framework_swagger',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'test1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'social_django.context_processors.backends',
                # 'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'test1.wsgi.application'

APPEND_SLASH = False
# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        # 'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test1',
        'HOST': '127.0.0.1',
        'USER': 'root',
        'PASSWORD': 'root',
        'POST': '3306',
    }
}

# 在根路由配置中指向 Channels。
ASGI_APPLICATION = 'message_example.routing.application'

# 配置channel layer
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],  # 这个是redis的地址
        },
    },
}

# 配置redis缓存，短时间存储手机验证码
redis_cache = parser_config('Redis')
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": redis_cache['LOCATION'],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "密码",
            "DECODE_RESPONSES": True,
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

TINYMCE_DEFAULT_CONFIG = {
    # 'theme': 'advanced',
    'width': 800,
    'height': 600,
    'relative_urls': False,
    'remove_script_host': False
}

CKEDITOR_CONFIGS = {
    'awesome_ckeditor': {
        'toolbar': 'Basic',
        'height': 450,
        'width': 800,
    },
}
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_ROOT = os.path.join(BASE_DIR, r'static/upload')
AUTH_USER_MODEL = 'One.LoginUser'  # 扩展系统的用户表后记得添加此行

# 全局认证
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 设置访问权限为只读
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        # 设置访问权限为必须是用户
        'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'users.utils.auth.Authtication', # 自定义认证
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),

    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',
}

# # 设置邮箱和用户名和手机号均可登录
# AUTHENTICATION_BACKENDS = (
#     'users.views.CustomBackend',
#     #第三方登录配置之微博登录
#     # 'social_core.backends.weibo.WeiboOAuth2',
#     #第三方登录配置之QQ登录
#     'social_core.backends.qq.QQOAuth2',
#     #第三方登录配置之微信登录，微信有两种:oauth2 和 oauth2app，我们使用auth2
#     'social_core.backends.weixin.WeixinOAuth2',
#     'django.contrib.auth.backends.ModelBackend',
# )

# #QQ应用的key与secret
# SOCIAL_AUTH_QQ_KEY = ''
# SOCIAL_AUTH_QQ_SECRET = ''

# #微信应用的key与secret
# SOCIAL_AUTH_WEIXIN_KEY = ''
# SOCIAL_AUTH_WEIXIN_SECRET = ''

# #配置用户授权之后重定向跳转的url
# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/index/'

import datetime

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),  # 设置 JWT Token 的有效时间
    'JWT_AUTH_HEADER_PREFIX': 'JWT',  # 设置 请求头中的前缀
}

# token = Token.objects.create(user=)
# print(token.key)

TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 800,
    'height': 600,
}
