"""
Django settings for test1 project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from conf.aliyun_api import parser_config

# from rest_framework.authtoken.models import Token

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9o@8xm_6@_7$%#0wb2j#@k7@tf3w3&2z_&_2at)(gp37wzizcf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'corsheaders',
    'One',
    'text',
    'taggit',
    'rest_framework_swagger',
    'drf_yasg',
    'verifications',
    'notifications',
    'django_apscheduler',
]

# SWAGGER_SETTINGS = {
#     "DEFAULT_GENERATOR_CLASS": "rest_framework.schemas.generators.BaseSchemaGenerator",
# }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'middleware.middleware',    # log
]

ROOT_URLCONF = 'test1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'static')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'social_django.context_processors.backends',
                # 'social_django.context_processors.login_redirect',
            ],
        },
    },
]

# WSGI_APPLICATION = 'test1.wsgi.application'
ASGI_APPLICATION = 'test1.routing.application'

# 配置channel layer
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],  # 这个是redis的地址
#         },
#     },
# }


APPEND_SLASH = False
# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        # 'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test1',
        'HOST': '127.0.0.1',
        'USER': 'root',
        'PASSWORD': 'root',
        'POST': '3306',
    }
}


# 配置redis缓存，短时间存储手机验证码
CACHES = {
    'default': {  # 默认
        'BACKEND': "django_redis.cache.RedisCache",
        # "LOCATION": "redis://192.168.8.111:6379/0",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
    },
    "session": {  # session
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://192.168.8.111:6379/1",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    'verify_code': {  # 验证码
        'BACKEND': "django_redis.cache.RedisCache",
        # "LOCATION": "redis://192.168.8.111:6379/2",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,    # 如果已存在自定义loggers，是否禁用此处logger配置
#     'formatters': {      # 日志格式化输出
#         'standard': {
#             'format': '[{asctime}] {request_id} {name} {levelname} {message}',    # *注意：这里的request_id是我们自定义字段
#             'datefmt': '%Y-%m-%d %H:%M:%S',    # 日期格式化
#             'style': '{',      # 格式化识别方式
#         }
#     },
#     'filters': {    # 定义日志过滤器
#         'require_debug_true': {      # 只有再debug模式下，handdler才有效
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#         'require_debug_false': {    # 只有在非debug模式下，handdler才有效
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'header_format': {    # 配置request_id，handdler不限制
#             '()': 'wechaty.utils.middleware.RequestLogFilter'
#         }
#     },
#     'handlers': {
#         'console': {    #控制台日志
#             'level': 'DEBUG',
#             'formatter': 'standard',
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true', 'header_format']
#         },
#         'info_file': {
#             'level': 'INFO',      #处理>info级别的日志
#             'formatter': 'standard',
#             'encoding': 'utf_8_sig',
#             'backupCount': 3,      #配置最多保留几次日志
#             'class': 'logging.handlers.TimedRotatingFileHandler',    #logging自带类，可以实现按日期切割
#             'filename': f'{HX_SETTINGS.WECHATY["LOG_PATH"]}wechaty-service-info.log',    #info日志目录
#             'when': 'H',    #配置多久备份一次
#             'filters': ['require_debug_false', 'header_format']
#         },
#         'error_file': {
#             'level': 'ERROR',      #处理>error级别的日志
#             'formatter': 'standard',
#             'encoding': 'utf_8_sig',
#             'backupCount': 3,    #配置最多保留几次日志
#             'class': 'logging.handlers.TimedRotatingFileHandler',    #logging自带类，可以实现按日期切割
#             'filename': f'{HX_SETTINGS.WECHATY["LOG_PATH"]}wechaty-service-error.log',    #error日志目录
#             'when': 'H',    #配置多久备份一次
#             'filters': ['require_debug_false', 'header_format']
#         }
#     },    # 同上2.1，为了减少篇幅，此处省略
#     'loggers': {
#         'wechaty': {    # app名，此app下面的所有log日志输出方式均使用此处定义配置
#             'handlers': ['console', 'info_file', 'error_file'],    # 日志输出配置
#             'level': 'INFO',    # 日志输出级别
#             'propagate': False,    # 不知道啥意思
#         },
#         'django': {    # 这里是覆写了系统自带的日志输出配置，系统日志打印格式使用我们自定义配置
#             'handlers': ['console', 'info_file', 'error_file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'django.server': {     # 这里是覆写了系统自带的日志输出配置，系统日志打印格式使用我们自定义配置
#             'handlers': ['console', 'info_file', 'error_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         }
#     }
# }

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"
SESSION_COOKIE_AGE = 10


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators



# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(os.path.dirname(__file__), 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    ('upload', os.path.join(STATIC_ROOT, 'upload').replace('\\', '/')),
]


MEDIA_ROOT = os.path.join(BASE_DIR, r'static/upload')
AUTH_USER_MODEL = 'One.LoginUser'  # 扩展系统的用户表后记得添加此行

# 全局认证
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 设置访问权限为只读
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        # 设置访问权限为必须是用户
        'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'users.utils.auth.Authtication', # 自定义认证
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),

    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',
}

# # 设置邮箱和用户名和手机号均可登录
# AUTHENTICATION_BACKENDS = (
#     'users.views.CustomBackend',
#     #第三方登录配置之微博登录
#     # 'social_core.backends.weibo.WeiboOAuth2',
#     #第三方登录配置之QQ登录
#     'social_core.backends.qq.QQOAuth2',
#     #第三方登录配置之微信登录，微信有两种:oauth2 和 oauth2app，我们使用auth2
#     'social_core.backends.weixin.WeixinOAuth2',
#     'django.contrib.auth.backends.ModelBackend',
# )

# #QQ应用的key与secret
# SOCIAL_AUTH_QQ_KEY = ''
# SOCIAL_AUTH_QQ_SECRET = ''

# #微信应用的key与secret
# SOCIAL_AUTH_WEIXIN_KEY = ''
# SOCIAL_AUTH_WEIXIN_SECRET = ''

# #配置用户授权之后重定向跳转的url
# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/index/'

import datetime

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),  # 设置 JWT Token 的有效时间
    'JWT_AUTH_HEADER_PREFIX': 'JWT',  # 设置 请求头中的前缀
}

TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 800,
    'height': 600,
}

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)